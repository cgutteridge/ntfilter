#!/usr/bin/perl

# This is a cheap and cheerful way to anonymise RDF. Don't trust it.

use Getopt::Long;
use Digest::MD5 qw/ md5_hex /;
use strict;
use warnings;

my $prefixtohash;
my $namespace;
my $salt;
my $help;
my $sameas;

GetOptions (
            "prefix=s"   => \$prefixtohash,      
            "namespace=s"   => \$namespace,
            "salt=s"   => \$salt,
            "help"  => \$help,   # flag
            "sameas"  => \$sameas,   # flag
) or help(1);
help(0) if( $help );
help(1) if !defined $prefixtohash;
help(1) if !defined $namespace;

sub help
{
	my( $exitcode ) = @_;

	print STDERR <<END;
$0 --prefix <text> --namespace <text> [--salt <text>] [--sameas] <filename>

Note that this just obfuscates the URIs and is not a full solution to making
data anonymous. 

--prefix    <text> : required. The start of the URIs to anonymise.
--namespace <text> : required. Namespace in which to create new URIs.
--salt      <text> : optional. If included this will salt the hash with this 
                      value. Effectively a password to decode them later.
--sameas           : optional. If set this will output a list of sameAs 
                      triples to link from the original to the hashed URIs.
                      This must use the same value for --salt, if any.
END

	exit $exitcode;
}

@ARGV = ( "-" ) if( @ARGV == 0 ); #default to stdin
if( @ARGV != 1 )
{	
	error( "Did not specify a filename." );
}
my $filename = $ARGV[0];
my $fh;
if( $filename eq "-" )
{
	$fh = *STDIN;
}
else
{
	open( $fh, "<:utf8", $filename ) || error( "Could not read $filename: $!" );
}
my $seen = {}; # global
LINE: while( my $line = readline( $fh ) )
{
	my $t = ntparse($line);

	if( $sameas )
	{
		sameas( $t->{s} );
		sameas( $t->{p} );
		sameas( $t->{o} );
		sameas( $t->{ot} );
		next LINE;
	}

	if( $t->{t} eq "triple" )	
	{
		$t->{s} = process($t->{s}) if( !$t->{s_bnode} );
		$t->{p} = process($t->{p});
		$t->{o} = process($t->{o}) if( !$t->{o_bnode} );
		$t->{ot} = process($t->{ot}) if( $t->{ot} );
	}

	ntprint($t);

}
exit;

sub process
{
	my( $uri) = @_;

	if( index( $uri, $prefixtohash ) == 0 )
	{
		return hashuri($uri);
	}
	
	return $uri;
}

sub hashuri
{
	my( $uri ) = @_;

	$uri.=$salt if( defined $salt );
	return $namespace.md5_hex( $uri );
}

# print the sameas for this uri if it is in scope, defined, and not seen before
sub sameas
{
	my( $uri ) = @_;

	return if !defined $uri; # might be an undefined otype
	return if index( $uri, $prefixtohash ) != 0;
	return if $seen->{$uri};

	my $t = {
		s=>hashuri($uri),
		p=>"http://www.w3.org/2002/07/owl#sameAs",
		o=>$uri,
		islit=>0,
		t=>"triple"
	};
	ntprint($t);
	$seen->{$uri} = 1;
}





sub error 
{
	my( $error ) = @_;

	print STDERR "$error\n";

	exit 1;
}


############################################################
# NTriples Line parser
# Repeated in every script so they are stand alone but if there's
# a bug it needs to be fixed in all the scripts
# does not currently unescape literals 
############################################################
sub ntparse
{
	my( $line ) = @_;
	chomp $line;
	
	if( $line =~ m/^\s*#(.*)/ ) { return { t=>"comment", "comment"=>$1 }; }
	if( $line =~ m/^\s*$/ ) { return { t=>"blank" }; }

	my $ok = $line =~ m/^(\<([^>]*)\>|(_:[^\s]*))\s+\<([^>]*)\>\s+(\<([^>]*)\>|(_:[^\s]*)|"([^"]*)"(\^\^\<([^>]*)\>|\@([^\s]+))?)\s*\.\s*$/;
	if( !$ok ) { return { t=>"error" }; }
	my $t={};
	$t->{t} = "triple";
	$t->{s} = $2||$3;
	$t->{p} = $4;
	$t->{o} = $6||$7||$8;
	$t->{islit} = defined $8;
	$t->{ot} = $10;
	$t->{ol} = $11;
	$t->{s_bnode} = defined $3;
	$t->{o_bnode} = defined $7;
	# does not currently unescape literals 

	return $t;
}
############################################################
# NTriples Line printer
# Repeated in every script so they are stand alone but if there's
# a bug it needs to be fixed in all the scripts
############################################################
sub ntprint
{
	my( $t ) = @_;

	return if( $t->{t} eq "error" );
	if( $t->{t} eq "blank" )
	{
		print "\n";
		return;
	}
	if( $t->{t} eq "comment" )
	{
		print "#".$t->{comment}."\n";
		return;
	}

	if( $t->{s_bnode} )
	{
		print $t->{s};
	}
	else
	{
		print "<".$t->{s}.">";
	}
	print " <".$t->{p}."> ";
	if( $t->{o_bnode} )
	{
		print $t->{o};
	}
	elsif( !$t->{islit} )
	{
		print "<".$t->{o}.">";
	}
	else
	{
		print "\"".$t->{o}."\"";
		if( $t->{ot} )
		{
			print "^^<".$t->{ot}.">";
		}
		elsif( $t->{ol} )
		{
			print "\@".$t->{ol};
		}
	}
	print " .\n";
}
