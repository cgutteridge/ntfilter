#!/usr/bin/perl

use Getopt::Long;
use strict;
use warnings;

my $predicate;
my $subject;
my $object;
my $otype;
my $olang;
my $onlycomments;
my $nocomments;
my $onlyliterals;
my $noliterals;
my $help;

GetOptions (
            "predicate=s"   => \$predicate,      # string
            "subject=s"   => \$subject,      # string
            "object=s"   => \$object,      # string
            "otype=s"   => \$otype,      # string
            "olang=s"   => \$olang,      # string
            "only-literals"  => \$onlyliterals,   # flag
            "no-literals"  => \$noliterals,   # flag
            "only-comments"  => \$onlycomments,   # flag
            "no-comments"  => \$nocomments,   # flag
            "help"  => \$help,   # flag
) or help(1);
help(0) if( $help );

sub help
{
	my( $exitcode ) = @_;

	print STDERR <<END;
$0 <options> [<filename>]

Filters a stream of NTriples to remove unwanted ones. Does not understand bnodes yet.

--predicate <text> : predicate must containt this text
--subject <text>   : subject must containt this text
--object <text>    : object must containt this text
--otype <text>     : object type must containt this text
--only-literals    : Only output triples where the object is a literal
--no-literals      : Only output triples where the object is not a literal
--only-comments    : Only output blank lines and comments
--no-comments      : Remove blank lines and comments

END
	exit $exitcode;
}

if( $onlyliterals && $noliterals ) {
	error( "Can't set --only-literals and --no-literals -- you'd have nothing left!" );
}
if( $onlycomments && $nocomments ) {
	error( "Can't set --only-comments and --no-comments -- you'd have nothing left!" );
}


@ARGV = ( "-" ) if( @ARGV == 0 ); #default to stdin
if( @ARGV != 1 )
{	
	error( "Did not specify a filename." );
}
my $filename = $ARGV[0];
my $fh;
if( $filename eq "-" )
{
	$fh = *STDIN;
}
else
{
	open( $fh, "<:utf8", $filename ) || error( "Could not read $filename: $!" );
}
while( my $line = readline( $fh ) )
{
	my( $t ) = ntparse($line);

	next if( $t->{t} ne "triple" && $nocomments );

	if( $t->{t} eq "triple" )
	{	
		next if( $onlycomments );

		next if( $onlyliterals && !$t->{islit} );
		next if( $noliterals && $t->{islit} );
	
		next if( defined $subject && index($t->{s},$subject)==-1 );
		
		next if( defined $predicate && index($t->{p},$predicate)==-1 );
	
		next if( defined $object && index($t->{o},$object)==-1 );
	
		next if( defined $otype && (!defined $t->{ot} || index($t->{ot},$otype)==-1 ));
	
		next if( defined $olang && (!defined $t->{ol} || index($t->{ol},$olang)==-1 ));
	}

	ntprint($t);
}
exit;









sub error 
{
	my( $error ) = @_;

	print STDERR "$error\n";

	exit 1;
}


############################################################
# NTriples Line parser
# Repeated in every script so they are stand alone but if there's
# a bug it needs to be fixed in all the scripts
# does not currently unescape literals 
############################################################
sub ntparse
{
	my( $line ) = @_;
	chomp $line;
	
	if( $line =~ m/^\s*#(.*)/ ) { return { t=>"comment", "comment"=>$1 }; }
	if( $line =~ m/^\s*$/ ) { return { t=>"blank" }; }

	my $ok = $line =~ m/^(\<([^>]*)\>|(_:[^\s]*))\s+\<([^>]*)\>\s+(\<([^>]*)\>|(_:[^\s]*)|"([^"]*)"(\^\^\<([^>]*)\>|\@([^\s]+))?)\s*\.\s*$/;
	if( !$ok ) { return { t=>"error" }; }
	my $t={};
	$t->{t} = "triple";
	$t->{s} = $2||$3;
	$t->{p} = $4;
	$t->{o} = $6||$7||$8;
	$t->{islit} = defined $8;
	$t->{ot} = $10;
	$t->{ol} = $11;
	$t->{s_bnode} = defined $3;
	$t->{o_bnode} = defined $7;
	# does not currently unescape literals 

	return $t;
}
############################################################
# NTriples Line printer
# Repeated in every script so they are stand alone but if there's
# a bug it needs to be fixed in all the scripts
############################################################
sub ntprint
{
	my( $t ) = @_;

	return if( $t->{t} eq "error" );
	if( $t->{t} eq "blank" )
	{
		print "\n";
		return;
	}
	if( $t->{t} eq "comment" )
	{
		print "#".$t->{comment}."\n";
		return;
	}

	if( $t->{s_bnode} )
	{
		print $t->{s};
	}
	else
	{
		print "<".$t->{s}.">";
	}
	print " <".$t->{p}."> ";
	if( $t->{o_bnode} )
	{
		print $t->{o};
	}
	elsif( !$t->{islit} )
	{
		print "<".$t->{o}.">";
	}
	else
	{
		print "\"".$t->{o}."\"";
		if( $t->{ot} )
		{
			print "^^<".$t->{ot}.">";
		}
		elsif( $t->{ol} )
		{
			print "\@".$t->{ol};
		}
	}
	print " .\n";
}
